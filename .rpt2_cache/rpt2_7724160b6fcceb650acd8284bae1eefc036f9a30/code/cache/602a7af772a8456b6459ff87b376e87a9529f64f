{"code":"import React from 'react';\r\nimport { TabsContext } from '../context';\r\nimport Item from './Item';\r\n// import Loader from './Loader';\r\nimport DisplayStatusMessage from './DisplayStatusMessage';\r\n// import { getCSSProps } from '../ThemeCSS';\r\nvar Tabs = React.forwardRef(function (props, noRefs) {\r\n    return (<TabsContext.Consumer>\r\n      {function (val) {\r\n        var requiredRefExists = val.state.payload.refs.some(function (ref) { return /required/.test(ref.ref_type); }), recommendedRefExists = val.state.payload.refs.some(function (ref) { return /recommended/.test(ref.ref_type); }), ifCanVisualizeGraph = (requiredRefExists || recommendedRefExists) && !val.state.errOccurred, renderGraph = <div className='tab-items-wrapper graph-wrapper'>\r\n                  <div id='graph' ref={val.refs.graph}></div>\r\n                  <div id='graph-key'>\r\n                    Key:<br />\r\n                    <span className='key key-line-required'></span> required<br />\r\n                    <span className='key key-line-recommended'></span> recommended\r\n                  </div>\r\n                  <span className={\"graph-tooltip \" + (val.state.graphNodeIsHovered ? '' : 'fade-out')} ref={val.refs.graphTooltip}></span>\r\n                </div>;\r\n        return (<div className='tabs-container' style={{ position: 'relative' }}>\r\n              {props.children}\r\n              \r\n              <div className='tabs-wrapper' style={{ opacity: val.state.refIsLoading ? 0 : 1 }}>\r\n                <ul className={\"tab required-tab\\n                  \" + (/required/.test(val.state.activeTabName) ? 'active-tab' : '') + \"\\n                  \" + (!val.isViewedWithMobile ? 'useCustomScrollBar' : '')} ref={/required/.test(val.state.activeTabName) ? val.refs.activeTab : val.refs.requiredTab}> \r\n                  {val.state.errOccurred ?\r\n            <DisplayStatusMessage typeofMsg='error' errOccurred={val.state.errOccurred} ref_type='required' refIsLoading={val.state.refIsLoading}/>\r\n            : requiredRefExists ?\r\n                val.state.payload.refs.map(function (ref, key) {\r\n                    return ref.ref_type === 'required' ?\r\n                        <Item data={ref.data} id={ref.id} refs={ref.refs} externLink={ref.url ? ref.url : null} key={key} handleReferenceClick={val.handleReferenceClick} ref={val.refs.refItemWrapper}/>\r\n                        : null;\r\n                })\r\n                : <DisplayStatusMessage typeofMsg='no-ref' ref_type='required' refIsLoading={val.state.refIsLoading}/>}\r\n                </ul>\r\n\r\n                <ul className={\"tab recommended-tab\\n                  \" + (/recommended/.test(val.state.activeTabName) ? 'active-tab' : '') + \"\\n                  \" + (!val.isViewedWithMobile ? 'useCustomScrollBar' : '')} ref={/recommended/.test(val.state.activeTabName) ? val.refs.activeTab : val.refs.recommendedTab}>\r\n                  {val.state.errOccurred ?\r\n            <DisplayStatusMessage typeofMsg='error' errOccurred={val.state.errOccurred} ref_type='recommended' refIsLoading={val.state.refIsLoading}/>\r\n            : recommendedRefExists ?\r\n                val.state.payload.refs.map(function (ref, key) {\r\n                    return ref.ref_type === 'recommended' ?\r\n                        <Item data={ref.data} id={ref.id} refs={ref.refs} externLink={ref.url ? ref.url : null} key={key} handleReferenceClick={val.handleReferenceClick} ref={val.refs.refItemWrapper}/>\r\n                        : null;\r\n                })\r\n                : <DisplayStatusMessage typeofMsg='no-ref' ref_type='recommended' errOccurred='' refIsLoading={val.state.refIsLoading}/>}\r\n                </ul>\r\n                \r\n                <ul className={\"tab graph-tab\\n                  \" + (/graph/.test(val.state.activeTabName) ? 'active-tab' : '') + \"\\n                  \" + (!val.isViewedWithMobile ? 'useCustomScrollBar' : '')} ref={/graph/.test(val.state.activeTabName) ? val.refs.activeTab : null}>\r\n                  {ifCanVisualizeGraph ? renderGraph\r\n            : <DisplayStatusMessage typeofMsg='no-ref' ref_type='graph' errOccurred={val.state.errOccurred} refIsLoading={val.state.refIsLoading}/>}\r\n                </ul>\r\n              </div>\r\n            </div>);\r\n    }}\r\n    </TabsContext.Consumer>);\r\n});\r\nexport default Tabs;\r\n","references":["C:/Users/Power'f-GOD/rocketlaunchr/lemma-chain-react/react-app/node_modules/@types/react/index.d.ts","C:/Users/Power'f-GOD/rocketlaunchr/lemma-chain-react/react-app/src/context.tsx","C:/Users/Power'f-GOD/rocketlaunchr/lemma-chain-react/react-app/src/components/Item.tsx","C:/Users/Power'f-GOD/rocketlaunchr/lemma-chain-react/react-app/src/components/DisplayStatusMessage.tsx"]}
